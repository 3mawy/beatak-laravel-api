//// -- LEVEL 1
//// -- Tables and References

// Creating tables
Table users as U {
  id int [pk, increment] // auto-increment
  full_name varchar
  created_at timestamp
  country_code int
}

Table countries {
  code int [pk]
  name varchar
  continent_name varchar
 }

// Creating references
// You can also define relaionship separately
// > many-to-one; < one-to-many; - one-to-one
Ref: U.country_code > countries.code
Ref: artists.country_code > countries.code

//----------------------------------------------//

//// -- LEVEL 2
//// -- Adding column settings

Table order_items {
  order_id int [ref: > orders.id] // inline relationship (many-to-one)
  track_id int
  quantity int [default: 1] // default value
}

Ref: order_items.track_id > tracks.id

Table orders {
  id int [pk] // primary key
  user_id int [not null, unique]
  status varchar
  created_at varchar [note: 'When order created'] // add column note
}

//----------------------------------------------//

//// -- Level 3
//// -- Enum, Indexes

// Enum for 'tracks' table below
Enum tracks_status {
  out_of_stock
  in_stock
  running_low [note: 'less than 20'] // add column note
}

// Indexes: You can define a single or multi-column index
Table tracks {
  id int [pk]
  name varchar
  artist_id int [not null]
  price int
  status tracks_status
  created_at datetime [default: `now()`]

  Indexes {
    (artist_id, status) [name:'track_status']
    id [unique]
  }
}

Table artists {
  id int
  country_code int
  artist_name varchar

  "created at" varchar
  admin_id int [ref: > U.id]
  Indexes {
    (id, country_code) [pk]
  }
}

Table artist_periods {
  id int [pk]
  artist_id int
  country_code int
  start_date datetime
  end_date datetime
}

Ref: tracks.a > artists.id // many-to-one
//composite foreign key
Ref: artist_periods.(artist_id, country_code) > artists.(id, country_code)
